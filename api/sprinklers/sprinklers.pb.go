// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sprinklers.proto

package sprinklers

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Circuit struct {
	Name             string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description      string  `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	WaterConsumption float64 `protobuf:"fixed64,3,opt,name=water_consumption,json=waterConsumption,proto3" json:"water_consumption,omitempty"`
	// true indicates this circuit is currently disabled
	Disabled bool `protobuf:"varint,4,opt,name=disabled,proto3" json:"disabled,omitempty"`
	// true indicates actively watering
	State                bool               `protobuf:"varint,5,opt,name=state,proto3" json:"state,omitempty"`
	TimeRemaining        *duration.Duration `protobuf:"bytes,6,opt,name=time_remaining,json=timeRemaining,proto3" json:"time_remaining,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Circuit) Reset()         { *m = Circuit{} }
func (m *Circuit) String() string { return proto.CompactTextString(m) }
func (*Circuit) ProtoMessage()    {}
func (*Circuit) Descriptor() ([]byte, []int) {
	return fileDescriptor_c75169631e9774f8, []int{0}
}

func (m *Circuit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Circuit.Unmarshal(m, b)
}
func (m *Circuit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Circuit.Marshal(b, m, deterministic)
}
func (m *Circuit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Circuit.Merge(m, src)
}
func (m *Circuit) XXX_Size() int {
	return xxx_messageInfo_Circuit.Size(m)
}
func (m *Circuit) XXX_DiscardUnknown() {
	xxx_messageInfo_Circuit.DiscardUnknown(m)
}

var xxx_messageInfo_Circuit proto.InternalMessageInfo

func (m *Circuit) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Circuit) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Circuit) GetWaterConsumption() float64 {
	if m != nil {
		return m.WaterConsumption
	}
	return 0
}

func (m *Circuit) GetDisabled() bool {
	if m != nil {
		return m.Disabled
	}
	return false
}

func (m *Circuit) GetState() bool {
	if m != nil {
		return m.State
	}
	return false
}

func (m *Circuit) GetTimeRemaining() *duration.Duration {
	if m != nil {
		return m.TimeRemaining
	}
	return nil
}

type ListCircuitsRequest struct {
	PageSize             int32    `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken            string   `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListCircuitsRequest) Reset()         { *m = ListCircuitsRequest{} }
func (m *ListCircuitsRequest) String() string { return proto.CompactTextString(m) }
func (*ListCircuitsRequest) ProtoMessage()    {}
func (*ListCircuitsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c75169631e9774f8, []int{1}
}

func (m *ListCircuitsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListCircuitsRequest.Unmarshal(m, b)
}
func (m *ListCircuitsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListCircuitsRequest.Marshal(b, m, deterministic)
}
func (m *ListCircuitsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCircuitsRequest.Merge(m, src)
}
func (m *ListCircuitsRequest) XXX_Size() int {
	return xxx_messageInfo_ListCircuitsRequest.Size(m)
}
func (m *ListCircuitsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCircuitsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListCircuitsRequest proto.InternalMessageInfo

func (m *ListCircuitsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListCircuitsRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

type ListCircuitsResponse struct {
	Items                []*Circuit `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	NextPageToken        string     `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ListCircuitsResponse) Reset()         { *m = ListCircuitsResponse{} }
func (m *ListCircuitsResponse) String() string { return proto.CompactTextString(m) }
func (*ListCircuitsResponse) ProtoMessage()    {}
func (*ListCircuitsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c75169631e9774f8, []int{2}
}

func (m *ListCircuitsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListCircuitsResponse.Unmarshal(m, b)
}
func (m *ListCircuitsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListCircuitsResponse.Marshal(b, m, deterministic)
}
func (m *ListCircuitsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCircuitsResponse.Merge(m, src)
}
func (m *ListCircuitsResponse) XXX_Size() int {
	return xxx_messageInfo_ListCircuitsResponse.Size(m)
}
func (m *ListCircuitsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCircuitsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListCircuitsResponse proto.InternalMessageInfo

func (m *ListCircuitsResponse) GetItems() []*Circuit {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *ListCircuitsResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

type GetCircuitRequest struct {
	// Provide an exact name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// or unambiguous description substring match
	Description          string   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetCircuitRequest) Reset()         { *m = GetCircuitRequest{} }
func (m *GetCircuitRequest) String() string { return proto.CompactTextString(m) }
func (*GetCircuitRequest) ProtoMessage()    {}
func (*GetCircuitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c75169631e9774f8, []int{3}
}

func (m *GetCircuitRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetCircuitRequest.Unmarshal(m, b)
}
func (m *GetCircuitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetCircuitRequest.Marshal(b, m, deterministic)
}
func (m *GetCircuitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCircuitRequest.Merge(m, src)
}
func (m *GetCircuitRequest) XXX_Size() int {
	return xxx_messageInfo_GetCircuitRequest.Size(m)
}
func (m *GetCircuitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCircuitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCircuitRequest proto.InternalMessageInfo

func (m *GetCircuitRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetCircuitRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type UpdateCircuitRequest struct {
	Circuit              *Circuit `protobuf:"bytes,1,opt,name=circuit,proto3" json:"circuit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateCircuitRequest) Reset()         { *m = UpdateCircuitRequest{} }
func (m *UpdateCircuitRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateCircuitRequest) ProtoMessage()    {}
func (*UpdateCircuitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c75169631e9774f8, []int{4}
}

func (m *UpdateCircuitRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateCircuitRequest.Unmarshal(m, b)
}
func (m *UpdateCircuitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateCircuitRequest.Marshal(b, m, deterministic)
}
func (m *UpdateCircuitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateCircuitRequest.Merge(m, src)
}
func (m *UpdateCircuitRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateCircuitRequest.Size(m)
}
func (m *UpdateCircuitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateCircuitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateCircuitRequest proto.InternalMessageInfo

func (m *UpdateCircuitRequest) GetCircuit() *Circuit {
	if m != nil {
		return m.Circuit
	}
	return nil
}

func init() {
	proto.RegisterType((*Circuit)(nil), "sprinklers.Circuit")
	proto.RegisterType((*ListCircuitsRequest)(nil), "sprinklers.ListCircuitsRequest")
	proto.RegisterType((*ListCircuitsResponse)(nil), "sprinklers.ListCircuitsResponse")
	proto.RegisterType((*GetCircuitRequest)(nil), "sprinklers.GetCircuitRequest")
	proto.RegisterType((*UpdateCircuitRequest)(nil), "sprinklers.UpdateCircuitRequest")
}

func init() { proto.RegisterFile("sprinklers.proto", fileDescriptor_c75169631e9774f8) }

var fileDescriptor_c75169631e9774f8 = []byte{
	// 419 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0xc1, 0x6f, 0xd3, 0x30,
	0x14, 0xc6, 0x67, 0xb6, 0x6e, 0xdd, 0x2b, 0x85, 0xee, 0xad, 0x87, 0x50, 0x34, 0x88, 0x72, 0x40,
	0x41, 0x88, 0x4c, 0x2a, 0x47, 0x2e, 0x88, 0x81, 0x10, 0x12, 0x07, 0x70, 0xe1, 0x5c, 0xb9, 0xc9,
	0xa3, 0xb2, 0xd6, 0xd8, 0xc1, 0x76, 0x00, 0xed, 0xaf, 0xe5, 0xc8, 0x9f, 0x81, 0x62, 0x37, 0x6b,
	0xc6, 0xda, 0xcb, 0x6e, 0xf1, 0xf7, 0xfd, 0xde, 0xf3, 0xfb, 0x9e, 0x03, 0x23, 0x5b, 0x19, 0xa9,
	0x2e, 0x57, 0x64, 0x6c, 0x56, 0x19, 0xed, 0x34, 0xc2, 0x46, 0x99, 0x3c, 0x59, 0x6a, 0xbd, 0x5c,
	0xd1, 0xb9, 0x77, 0x16, 0xf5, 0xf7, 0xf3, 0xa2, 0x36, 0xc2, 0x49, 0xad, 0x02, 0x9b, 0xfc, 0x61,
	0x70, 0x74, 0x21, 0x4d, 0x5e, 0x4b, 0x87, 0x08, 0x07, 0x4a, 0x94, 0x14, 0xb1, 0x98, 0xa5, 0xc7,
	0xdc, 0x7f, 0x63, 0x0c, 0x83, 0x82, 0x6c, 0x6e, 0x64, 0xd5, 0x14, 0x45, 0xf7, 0xbc, 0xd5, 0x95,
	0xf0, 0x05, 0x9c, 0xfc, 0x12, 0x8e, 0xcc, 0x3c, 0xd7, 0xca, 0xd6, 0x65, 0xe0, 0xf6, 0x63, 0x96,
	0x32, 0x3e, 0xf2, 0xc6, 0xc5, 0x46, 0xc7, 0x09, 0xf4, 0x0b, 0x69, 0xc5, 0x62, 0x45, 0x45, 0x74,
	0x10, 0xb3, 0xb4, 0xcf, 0xaf, 0xcf, 0x38, 0x86, 0x9e, 0x75, 0xc2, 0x51, 0xd4, 0xf3, 0x46, 0x38,
	0xe0, 0x1b, 0x78, 0xe0, 0x64, 0x49, 0x73, 0x43, 0xa5, 0x90, 0x4a, 0xaa, 0x65, 0x74, 0x18, 0xb3,
	0x74, 0x30, 0x7d, 0x94, 0x85, 0x64, 0x59, 0x9b, 0x2c, 0x7b, 0xb7, 0x4e, 0xc6, 0x87, 0x4d, 0x01,
	0x6f, 0xf9, 0xe4, 0x0b, 0x9c, 0x7e, 0x92, 0xd6, 0xad, 0x53, 0x5a, 0x4e, 0x3f, 0x6a, 0xb2, 0x0e,
	0x1f, 0xc3, 0x71, 0x25, 0x96, 0x34, 0xb7, 0xf2, 0x2a, 0x44, 0xee, 0xf1, 0x7e, 0x23, 0xcc, 0xe4,
	0x15, 0xe1, 0x19, 0x80, 0x37, 0x9d, 0xbe, 0xa4, 0x36, 0xb5, 0xc7, 0xbf, 0x36, 0x42, 0x22, 0x61,
	0x7c, 0xb3, 0xa5, 0xad, 0xb4, 0xb2, 0x84, 0xcf, 0xa1, 0x27, 0x1d, 0x95, 0x36, 0x62, 0xf1, 0x7e,
	0x3a, 0x98, 0x9e, 0x66, 0x9d, 0xb7, 0x59, 0xc3, 0x3c, 0x10, 0xf8, 0x0c, 0x1e, 0x2a, 0xfa, 0xed,
	0xe6, 0xb7, 0xae, 0x19, 0x36, 0xf2, 0xe7, 0xeb, 0xab, 0x3e, 0xc2, 0xc9, 0x07, 0x6a, 0x6f, 0x6a,
	0x67, 0xbf, 0xd3, 0x4b, 0x25, 0xef, 0x61, 0xfc, 0xad, 0x2a, 0x84, 0xa3, 0xff, 0xba, 0xbd, 0x84,
	0xa3, 0x3c, 0x28, 0xbe, 0xe1, 0x8e, 0xb9, 0x5b, 0x66, 0xfa, 0x97, 0xc1, 0x68, 0xd6, 0xfa, 0x33,
	0x32, 0x3f, 0x65, 0x4e, 0x38, 0x83, 0xfb, 0xdd, 0x8d, 0xe0, 0xd3, 0x6e, 0x8b, 0x2d, 0xeb, 0x9f,
	0xc4, 0xbb, 0x81, 0xb0, 0xcc, 0x64, 0x0f, 0xdf, 0x02, 0x6c, 0xb2, 0xe3, 0x59, 0xb7, 0xe2, 0xd6,
	0x4e, 0x26, 0xdb, 0x86, 0x4e, 0xf6, 0xf0, 0x35, 0x0c, 0x6f, 0x84, 0xc6, 0x6d, 0xdc, 0x8e, 0xe2,
	0xc5, 0xa1, 0xff, 0xb9, 0x5e, 0xfd, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x5e, 0x1d, 0x0c, 0x1f, 0x64,
	0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SprinklerServiceClient is the client API for SprinklerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SprinklerServiceClient interface {
	ListCircuits(ctx context.Context, in *ListCircuitsRequest, opts ...grpc.CallOption) (*ListCircuitsResponse, error)
	GetCircuit(ctx context.Context, in *GetCircuitRequest, opts ...grpc.CallOption) (*Circuit, error)
	UpdateCircuit(ctx context.Context, in *Circuit, opts ...grpc.CallOption) (*Circuit, error)
}

type sprinklerServiceClient struct {
	cc *grpc.ClientConn
}

func NewSprinklerServiceClient(cc *grpc.ClientConn) SprinklerServiceClient {
	return &sprinklerServiceClient{cc}
}

func (c *sprinklerServiceClient) ListCircuits(ctx context.Context, in *ListCircuitsRequest, opts ...grpc.CallOption) (*ListCircuitsResponse, error) {
	out := new(ListCircuitsResponse)
	err := c.cc.Invoke(ctx, "/sprinklers.SprinklerService/ListCircuits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sprinklerServiceClient) GetCircuit(ctx context.Context, in *GetCircuitRequest, opts ...grpc.CallOption) (*Circuit, error) {
	out := new(Circuit)
	err := c.cc.Invoke(ctx, "/sprinklers.SprinklerService/GetCircuit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sprinklerServiceClient) UpdateCircuit(ctx context.Context, in *Circuit, opts ...grpc.CallOption) (*Circuit, error) {
	out := new(Circuit)
	err := c.cc.Invoke(ctx, "/sprinklers.SprinklerService/UpdateCircuit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SprinklerServiceServer is the server API for SprinklerService service.
type SprinklerServiceServer interface {
	ListCircuits(context.Context, *ListCircuitsRequest) (*ListCircuitsResponse, error)
	GetCircuit(context.Context, *GetCircuitRequest) (*Circuit, error)
	UpdateCircuit(context.Context, *Circuit) (*Circuit, error)
}

// UnimplementedSprinklerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSprinklerServiceServer struct {
}

func (*UnimplementedSprinklerServiceServer) ListCircuits(ctx context.Context, req *ListCircuitsRequest) (*ListCircuitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCircuits not implemented")
}
func (*UnimplementedSprinklerServiceServer) GetCircuit(ctx context.Context, req *GetCircuitRequest) (*Circuit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCircuit not implemented")
}
func (*UnimplementedSprinklerServiceServer) UpdateCircuit(ctx context.Context, req *Circuit) (*Circuit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCircuit not implemented")
}

func RegisterSprinklerServiceServer(s *grpc.Server, srv SprinklerServiceServer) {
	s.RegisterService(&_SprinklerService_serviceDesc, srv)
}

func _SprinklerService_ListCircuits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCircuitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SprinklerServiceServer).ListCircuits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sprinklers.SprinklerService/ListCircuits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SprinklerServiceServer).ListCircuits(ctx, req.(*ListCircuitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SprinklerService_GetCircuit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCircuitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SprinklerServiceServer).GetCircuit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sprinklers.SprinklerService/GetCircuit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SprinklerServiceServer).GetCircuit(ctx, req.(*GetCircuitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SprinklerService_UpdateCircuit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Circuit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SprinklerServiceServer).UpdateCircuit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sprinklers.SprinklerService/UpdateCircuit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SprinklerServiceServer).UpdateCircuit(ctx, req.(*Circuit))
	}
	return interceptor(ctx, in, info, handler)
}

var _SprinklerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sprinklers.SprinklerService",
	HandlerType: (*SprinklerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListCircuits",
			Handler:    _SprinklerService_ListCircuits_Handler,
		},
		{
			MethodName: "GetCircuit",
			Handler:    _SprinklerService_GetCircuit_Handler,
		},
		{
			MethodName: "UpdateCircuit",
			Handler:    _SprinklerService_UpdateCircuit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sprinklers.proto",
}
